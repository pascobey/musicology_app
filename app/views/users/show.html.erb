<!-- centering -->
<div class="d-flex justify-content-center">
    <!-- user show content container - column -->
    <div id="user-show-content-container" class="d-flex flex-column shadow-lg rounded dragscroll" style="position:fixed;left:24px;right:24px;top:110px;bottom:24px;background-color:rgb(255,240,245);overflow-x:scroll;overflow-y:scroll;">
        <!-- create space -->
        <div id="scrollable-zoom-block" style="width:2000px;height:2000px;">
            <!-- graph-window -->
            <svg id="graph-window" width="100%" height="100%">
                <% vertices_count = rand(2..100) %>
                <% center = {:x => 50, :y => 50} %>
                <% q_one_bound_rad = Math::PI / 2 %>
                <% q_two_bound_rad = Math::PI %>
                <% q_three_bound_rad = 3 * Math::PI / 2 %>
                <% vertices_coordinates = {} %>
                <% i = 1 %>
                <% build_angle_sum_rad = 0 %>
                <% circumradius = 48 %>
                <% central_angle_rad = (360.0/vertices_count) * Math::PI / 180 %>
                <% until i == (vertices_count + 1) %>
                    <% if i == 1 %>
                        <% vertices_coordinates.merge!( i => { :x => center[:x], :y => ( center[:y] - circumradius ) } )  %>
                    <% else %>
                        <% if build_angle_sum_rad <= q_one_bound_rad %>
                            <% opposite = circumradius * Math.sin(build_angle_sum_rad) %>
                            <% adjacent = circumradius * Math.cos(build_angle_sum_rad) %>
                            <% vertices_coordinates.merge!(i => { :x => ( center[:x] - opposite ), :y => ( center[:y] - adjacent) }) %>
                        <% elsif q_one_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= q_two_bound_rad %>
                            <% theta_rad = (build_angle_sum_rad - q_one_bound_rad) %>
                            <% opposite = circumradius * Math.sin(theta_rad) %>
                            <% adjacent = circumradius * Math.cos(theta_rad) %>
                            <% vertices_coordinates.merge!(i => { :x => ( center[:x] - adjacent ), :y => ( center[:y] + opposite) }) %>
                        <% elsif q_two_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= q_three_bound_rad %>
                            <% theta_rad = build_angle_sum_rad - q_two_bound_rad %>
                            <% opposite = circumradius * Math.sin(theta_rad) %>
                            <% adjacent = circumradius * Math.cos(theta_rad) %>
                            <% vertices_coordinates.merge!(i => { :x => ( center[:x] + opposite ), :y => ( center[:y] + adjacent) }) %>
                        <% elsif q_three_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= (q_two_bound_rad * 2) %>
                            <% theta_rad = build_angle_sum_rad - q_three_bound_rad %>
                            <% opposite = circumradius * Math.sin(theta_rad) %>
                            <% adjacent = circumradius * Math.cos(theta_rad) %>
                            <% vertices_coordinates.merge!(i => { :x => ( center[:x] + adjacent ), :y => ( center[:y] - opposite) }) %>
                        <% end %>
                    <% end %>
                    <circle cx="<%= vertices_coordinates.dig(i, :x) %>%" cy="<%= vertices_coordinates.dig(i, :y) %>%" r="0.05%" stroke="black" stroke-width="2"></circle>
                    <% build_angle_sum_rad = build_angle_sum_rad + central_angle_rad %>
                    <% i = i.next %>
                <% end %>
                <% l = 1 %>
                <% until l == (vertices_count + 1) %>
                    <% e = 1 %>
                    <% until e == (vertices_count) %>
                        <line x1="<%= vertices_coordinates.dig(l, :x) %>%" 
                            y1="<%= vertices_coordinates.dig(l, :y) %>%" 
                            x2="<%= vertices_coordinates.dig((e), :x) %>%" 
                            y2="<%= vertices_coordinates.dig((e), :y) %>%" 
                            style="stroke:black;stroke-width:2;" />
                        <% e = e.next %>
                    <% end %>
                    <% l = l.next %>
                <% end %>
            </svg><!-- graph-window -->
        </div><!-- create space -->
        <!-- zoom-buttons-container -->
        <div id="zoom-buttons-container" style="position:fixed;bottom:60px;left:60px;">
            <button id="zoom-in-btn" class="zoom-btn" onclick="zoomIn()">+</button>
            <button id="zoom-out-btn" class="zoom-btn" onclick="zoomOut()">-</button>
        </div><!-- zoom-buttons-container -->
    </div><!-- user show content container - column -->
</div><!-- centering -->
<script>
    function makeZoomInUnavailable() {
        document.getElementById("zoom-in-btn").classList.add("unavailable");
        document.getElementById("zoom-in-btn").onclick = null;
    }
    function makeZoomInAvailable() {
        document.getElementById("zoom-in-btn").classList.remove("unavailable");
        document.getElementById("zoom-in-btn").onclick = null;
    }
    function makeZoomOutUnavailable() {
        document.getElementById("zoom-out-btn").classList.add("unavailable");
        document.getElementById("zoom-out-btn").onclick = "zoomIn()";
    }
    function makeZoomOutAvailable() {
        document.getElementById("zoom-out-btn").classList.remove("unavailable");
        document.getElementById("zoom-out-btn").onclick = "zoomOut()";
    }
    function zoomIn() {
        if (document.getElementById("scrollable-zoom-block").style.width == "5000px") {
            makeZoomInUnavailable();
        else
            document.getElementById("scrollable-zoom-block").style.width = (parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) + 250) + "px";
            document.getElementById("scrollable-zoom-block").style.height = (parseInt((document.getElementById("scrollable-zoom-block").style.height).replace("px", "")) + 250) + "px";
        }
        if ((parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) > 500) && (document.getElementById("zoom-out-btn").onclick == null)) {
            makeZoomOutAvailable();
        }
    }
    function zoomOut() {
        if (document.getElementById("scrollable-zoom-block").style.width == "500px") {
            makeZoomOutUnavailable();
        else 
            document.getElementById("scrollable-zoom-block").style.width = (parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) - 250) + "px";
            document.getElementById("scrollable-zoom-block").style.height = (parseInt((document.getElementById("scrollable-zoom-block").style.height).replace("px", "")) - 250) + "px";
        }
        if ((parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) < 5000) && (document.getElementById("zoom-in-btn").onclick == null)) {
            makeZoomInAvailable();
        }
    }
    document.getElementById("user-show-content-container").scrollBy(450,650);
</script>