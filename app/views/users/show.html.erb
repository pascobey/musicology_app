<!-- centering -->
<div class="d-flex justify-content-center">
    <!-- user show content container - column -->
    <div id="user-show-content-container" class="d-flex flex-column shadow-lg rounded" style="position:fixed;left:24px;right:24px;top:110px;bottom:24px;background-color:rgb(255,240,245);overflow-x:scroll;overflow-y:scroll;">
        <!-- create space -->
        <div id="scrollable-zoom-block" style="width:10000px;height:10000px;">
            <!-- graph-window -->
            <svg id="graph-window" width="100%" height="100%">
                <% @playlists.each do |playlist| %>
                    <% vertices_count = playlist.artists.size %>
                    <% center = {:x => (@playlists.size * (@playlists.last.id - @playlists.first.id)), :y => (@playlists.size * (@playlists.last.id - @playlists.first.id))} %>
                    <% q_one_bound_rad = Math::PI / 2 %>
                    <% q_two_bound_rad = Math::PI %>
                    <% q_three_bound_rad = 3 * Math::PI / 2 %>
                    <% vertices_coordinates = {} %>
                    <% i = 1 %>
                    <% build_angle_sum_rad = 0 %>
                    <% circumradius = 40 %>
                    <% central_angle_rad = (360.0/vertices_count) * Math::PI / 180 %>
                    <% until i == (vertices_count + 1) %>
                        <% if i == 1 %>
                            <% vertices_coordinates.merge!( i => { :x => center[:x], :y => ( center[:y] - circumradius ) } )  %>
                        <% else %>
                            <% if build_angle_sum_rad <= q_one_bound_rad %>
                                <% opposite = circumradius * Math.sin(build_angle_sum_rad) %>
                                <% adjacent = circumradius * Math.cos(build_angle_sum_rad) %>
                                <% vertices_coordinates.merge!(i => { :x => ( center[:x] - opposite ), :y => ( center[:y] - adjacent) }) %>
                            <% elsif q_one_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= q_two_bound_rad %>
                                <% theta_rad = (build_angle_sum_rad - q_one_bound_rad) %>
                                <% opposite = circumradius * Math.sin(theta_rad) %>
                                <% adjacent = circumradius * Math.cos(theta_rad) %>
                                <% vertices_coordinates.merge!(i => { :x => ( center[:x] - adjacent ), :y => ( center[:y] + opposite) }) %>
                            <% elsif q_two_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= q_three_bound_rad %>
                                <% theta_rad = build_angle_sum_rad - q_two_bound_rad %>
                                <% opposite = circumradius * Math.sin(theta_rad) %>
                                <% adjacent = circumradius * Math.cos(theta_rad) %>
                                <% vertices_coordinates.merge!(i => { :x => ( center[:x] + opposite ), :y => ( center[:y] + adjacent) }) %>
                            <% elsif q_three_bound_rad < build_angle_sum_rad && build_angle_sum_rad <= (q_two_bound_rad * 2) %>
                                <% theta_rad = build_angle_sum_rad - q_three_bound_rad %>
                                <% opposite = circumradius * Math.sin(theta_rad) %>
                                <% adjacent = circumradius * Math.cos(theta_rad) %>
                                <% vertices_coordinates.merge!(i => { :x => ( center[:x] + adjacent ), :y => ( center[:y] - opposite) }) %>
                            <% end %>
                        <% end %>
                        <% build_angle_sum_rad = build_angle_sum_rad + central_angle_rad %>
                        <% i = i.next %>
                    <% end %>
                    <% l = 1 %>
                    <% until l == (vertices_count + 1) %>
                        <% e = 1 %>
                        <% until e == (vertices_count) %>
                            <line x1="<%= vertices_coordinates.dig(l, :x) %>%" 
                                y1="<%= vertices_coordinates.dig(l, :y) %>%" 
                                x2="<%= vertices_coordinates.dig((e), :x) %>%" 
                                y2="<%= vertices_coordinates.dig((e), :y) %>%" 
                                style="stroke:black;stroke-width:2;"/>
                            <% e = e.next %>
                        <% end %>
                        <% l = l.next %>
                    <% end %>
                    <% p = 1%>
                    <% until p == (vertices_count + 1) %>
                        <pattern id="<%= playlist.artists[p - 1].name.gsub(/\s+/, "") %>-<%= playlist.artists[p - 1].id %>" x="calc(<%= vertices_coordinates.dig(p, :x) %>% - 30px)" y="calc(<%= vertices_coordinates.dig(p, :y) %>% - 30px)" patternUnits="userSpaceOnUse" height="60" width="60">
                            <image x="0" y="0" height="60" width="60" xlink:href="<%= playlist.artists[p - 1].artist_image_url %>"></image>
                        </pattern>
                        <circle cx="<%= vertices_coordinates.dig(p, :x) %>%" cy="<%= vertices_coordinates.dig(p, :y) %>%" r="30" stroke="black" stroke-width="2" fill="url(#<%= playlist.artists[p - 1].name.gsub(/\s+/, "") %>-<%= playlist.artists[p - 1].id %>)"/>
                        <% p = p.next %>
                    <% end %>
                <% end %>
            </svg><!-- graph-window -->
        </div><!-- create space -->
        <!-- zoom-buttons-container -->
        <div id="zoom-buttons-container" style="position:fixed;bottom:50px;left:50px;">
            <button id="zoom-out-btn" class="text-justified zoom-btn" style="width:29px;height:29px;" onclick="zoomOut()">-</button>
            <button id="zoom-in-btn" class="text-justified zoom-btn" style="width:29px;height:29px;" onclick="zoomIn()">+</button>
        </div><!-- zoom-buttons-container -->
    </div><!-- user show content container - column -->
</div><!-- centering -->
<script>
    function zoomIn() {
        document.getElementById("scrollable-zoom-block").style.width = (parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) + 250) + "px";
        document.getElementById("scrollable-zoom-block").style.height = (parseInt((document.getElementById("scrollable-zoom-block").style.height).replace("px", "")) + 250) + "px";
    }
    function zoomOut() {
        document.getElementById("scrollable-zoom-block").style.width = (parseInt((document.getElementById("scrollable-zoom-block").style.width).replace("px", "")) - 250) + "px";
        document.getElementById("scrollable-zoom-block").style.height = (parseInt((document.getElementById("scrollable-zoom-block").style.height).replace("px", "")) - 250) + "px";
    }
    document.getElementById("user-show-content-container").scrollBy(4000,4000);
</script>